/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package quotes;

import com.google.common.reflect.TypeToken;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

import java.io.*;
import java.lang.reflect.Array;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.URL;
import java.net.UnknownHostException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.Random;

public class App {

    public List<Quote> readFile() throws IOException {
        //start gson
        Gson gson = new Gson();
        //path
        String path = "src/main/resources/recentquotes.json";

        //scanner reads file
        String text = new String (Files.readAllBytes(Paths.get(path)), StandardCharsets.UTF_8);

        //creates an artifact for gson casting
        TypeToken<List<Quote>> token = new TypeToken<>() {
        };
        //creates from text, list object
        List<Quote> quotes = gson.fromJson(text, token.getType());

        return quotes;
    }

    public String randomQuote (List<Quote> quotes){
        //variables
        int max = quotes.size();
        int min = 0;
        //random choice between max and min
        Random r = new Random();
        int choice = r.nextInt((max-min)+1)+min;
        String output = quotes.get(choice).toString();
        //return
        return output;
    }


    public String SwansonMe() {
        try {
            //create connection and send it.
            URL url = new URL("https://ron-swanson-quotes.herokuapp.com/v2/quotes");
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setRequestMethod("GET");

            //read in answer via string
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String inputByLine;
            StringBuilder content = new StringBuilder();

            //while there's content, append.
            while ((inputByLine = in.readLine()) != null)
            {
                content.append(inputByLine);
            }
            in.close();
            return content.toString();

        } catch (IOException e){
            //print error
            e.printStackTrace();
        }
        return "failed to retrieve";
    }

    public boolean isInternetOnline() throws UnknownHostException {
        //returns true if offline, false if internet is connected.
        boolean output = !( "127.0.0.1"
                    .equals(InetAddress
                        .getLocalHost()
                        .getHostAddress() ) );
        return output;
    }

    public void saveFile(List<Quote> quotes) throws IOException {

        try {

            //file output name
            String fileName = "src/main/resources/output.json";

            //take our list of quote and put them back into json format.
            Gson gson = new Gson();
            FileWriter file = new FileWriter(fileName);
            gson.toJson(quotes,file);
            file.close();

        }
        catch (IOException e) {
            System.out.println("harsh times.  couldn't print this thing" + e);
        }

    }

    public List<Quote> addQuote(String wisdom, List<Quote> quotes){
        Gson gson = new Gson();
        //new arraylist for tags
        ArrayList<String> tags = new ArrayList<>();
        //remove brackets
        String[] jsonWisdom = gson.fromJson(wisdom, String[].class);
        //create new quote
        Quote quote = new Quote(tags, "Ron Swanson", "0", jsonWisdom[0]);
        //push into quotes
        quotes.add(quote);

        return quotes;
    }

    public static void main(String[] args) throws IOException {
        //create instance
        App app = new App();

        //is the internet working?
        if ( app.isInternetOnline() ) {
            //ONLINE: call quote from an API
            String wisdom = app.SwansonMe();
            //print
            System.out.println(wisdom);

            //read all quotes into a list
            List<Quote> quotes = app.readFile();
            //add quote to list
            quotes = app.addQuote(wisdom, quotes);
            //save quote to file output
            app.saveFile(quotes);

        }
        else {
            //OFFLINE: read file into data structure
            List<Quote> quotes = app.readFile();
            //call a random quote locally
            String randomQuote = app.randomQuote(quotes);
            //print
            System.out.println(randomQuote);
        }

    }
}

